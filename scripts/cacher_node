#!/usr/bin/env python3
import rospy
import sentry_sdk
sentry_sdk.init(rospy.get_param("/liability_cacher/cacher/sentry_key"))

import json

from robonomics_liability.msg import Liability
from robonomics_msgs.msg import Result
from ipfs_common.ipfs_rosbag import IpfsRosBag

from helpers.models import Liability as L
from helpers.models import Base, engine, db_session
from helpers.ipfs import ipfs_download
from helpers.robonomics_model import RobonomicsModel as RM


class CacherNode:

    def __init__(self):
        rospy.init_node("cacher")
        rospy.loginfo("Launching cacher node...")

        # ROS Topics
        rospy.Subscriber("/liability/incoming", Liability, self.incoming_liability)
        rospy.Subscriber("/liability/infochan/incoming/result", Result, self.incoming_result)

        # Database
        Base.metadata.create_all(engine)
        self.session = db_session()

        rospy.loginfo("Cacher node is launched!")

    def incoming_liability(self, liability: Liability):
        rospy.loginfo(liability)

        rm = RM(liability.model.multihash)

        l = L(
                address         = liability.address.address,
                model           = liability.model.multihash,
                model_data      = rm.model_data,
                objective       = liability.objective.multihash,
                objective_data  = rm.objective(liability.objective),
                promisee        = liability.promisee.address,
                promisor        = liability.promisor.address,
                lighthouse      = liability.lighthouse.address,
                token           = liability.token.address,
                cost            = liability.cost.uint256,
                validator       = liability.validator.address,
                validatorFee    = liability.validatorFee.uint256
                )

        self.session.add(l)
        self.session.commit()
        rospy.loginfo(l)

    def incoming_result(self, result: Result):
        rospy.loginfo(result)
        if result.liability.address == "0x0000000000000000000000000000000000000000":
            return

        q = self.session.query(L).filter(L.address == result.liability.address) #.update({L.result: result.result.multihash})

        try:
            l = q.one()
            rm = RM(l.model, model_data = l.model_data)
            q.update({L.result: result.result.multihash, L.result_data: rm.result(result.result)})
        except:
            print("No results")

        self.session.commit()

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    CacherNode().spin()

