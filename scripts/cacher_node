#!/usr/bin/env python3
import rospy

from robonomics_liability.msg import Liability
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from db_helper.liability import Liability as L, Base


class CacherNode:

    def __init__(self):
        rospy.init_node("cacher")
        rospy.loginfo("Launching cacher node...")

        # ROS Topics
        rospy.Subscriber("/liability/incoming", Liability, self.incoming_liability)

        # Database
        engine = create_engine(rospy.get_param("~db_credentials")[:-1], echo=True)
        Base.metadata.create_all(engine)
        self.session = sessionmaker(bind=engine)()

        rospy.loginfo("Cacher node is launched!")

    def incoming_liability(self, liability: Liability):
        rospy.loginfo(liability)
        l = L(
                address     = liability.address.address,
                model       = liability.model.multihash,
                objective   = liability.objective.multihash,
                result      = liability.result.multihash,
                promisee    = liability.promisee.address,
                promisor    = liability.promisor.address,
                lighthouse  = liability.lighthouse.address,
                token       = liability.token.address,
                cost        = liability.cost.uint256,
                validator   = liability.validator.address,
                validatorFee = liability.validatorFee.uint256
                )
        self.session.add(l)
        self.session.commit()
        rospy.loginfo(l)

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    CacherNode().spin()

