#!/usr/bin/env python3
import rospy
import sentry_sdk
sentry_sdk.init(rospy.get_param("/liability_cacher/cacher/sentry_key"))

import json

from robonomics_liability.msg import Liability
from robonomics_msgs.msg import Result
from ethereum_common.msg import Address
from robonomics_liability.srv import ReadLiability, ReadLiabilityRequest
from ipfs_common.ipfs_rosbag import IpfsRosBag

from liability_cacher.srv import LiabilityAddress, LiabilityAddressResponse
from helpers.models import Liability as L
from helpers.models import Base, engine, db_session
from helpers.ipfs import ipfs_download
from helpers.robonomics_model import RobonomicsModel as RM


class CacherNode:

    def __init__(self):
        rospy.init_node("cacher")
        rospy.loginfo("Launching cacher node...")

        # ROS Topics
        rospy.Subscriber("/liability/incoming", Liability, self.incoming_liability)
        rospy.Subscriber("/liability/infochan/incoming/result", Result, self.incoming_result)

        # Database
        Base.metadata.create_all(engine)
        self.session = db_session()

        rospy.Service("update", LiabilityAddress, self.update_liability)

        rospy.loginfo("Cacher node is launched!")

    def incoming_liability(self, liability: Liability):
        rospy.loginfo(liability)

        rm = RM(liability.model.multihash)

        l = L(
                address         = liability.address.address,
                model           = liability.model.multihash,
                model_data      = rm.model_data,
                objective       = liability.objective.multihash,
                objective_data  = rm.objective(liability.objective),
                promisee        = liability.promisee.address,
                promisor        = liability.promisor.address,
                lighthouse      = liability.lighthouse.address,
                token           = liability.token.address,
                cost            = liability.cost.uint256,
                validator       = liability.validator.address,
                validatorFee    = liability.validatorFee.uint256
                )

        try:
            self.session.add(l)
            self.session.commit()
            rospy.loginfo(l)
        except Exception as e:
            self.session.rollback()
            rospy.logerr("Didn't commit liability: {}".format(e))

    def incoming_result(self, result: Result):
        rospy.loginfo(result)
        if result.liability.address == "0x0000000000000000000000000000000000000000":
            return

        q = self.session.query(L).filter(L.address == result.liability.address) #.update({L.result: result.result.multihash})

        try:
            l = q.one()
            rm = RM(l.model, model_data = l.model_data)
            q.update({L.result: result.result.multihash, L.result_data: rm.result(result.result)})
        except Exception as e:
            rospy.logerr("No results: {}".format(e))

        self.session.commit()

    def update_liability(self, liability: LiabilityAddress):
        rospy.loginfo("Updating...")
        rospy.wait_for_service("/liability/read")
        read_liability = rospy.ServiceProxy("/liability/read", ReadLiability)

        rl = read_liability(ReadLiabilityRequest(Address(liability.data))).liability

        rm = RM(rl.model.multihash)
        resultm = RM(rl.model.multihash, rm.model_data)

        updated = L(
                address         = rl.address.address,
                model           = rl.model.multihash,
                model_data      = rm.model_data,
                objective       = rl.objective.multihash,
                objective_data  = rm.objective(rl.objective),
                promisee        = rl.promisee.address,
                promisor        = rl.promisor.address,
                lighthouse      = rl.lighthouse.address,
                token           = rl.token.address,
                cost            = rl.cost.uint256,
                result          = rl.result.multihash,
                result_data     = resultm.result(rl.result.multihash),
                validator       = rl.validator.address,
                validatorFee    = rl.validatorFee.uint256
                )

        q = self.session.query(L).filter(L.address == rl.address.address)

        try:
            l = q.one()
            q.update({
                L.model: updated.model,
                L.model_data: updated.model_data,
                L.objective: updated.objective,
                L.objective_data: updated.objective_data,
                L.promisee: updated.promisee,
                L.promisor: updated.promisor,
                L.lighthouse: updated.lighthouse,
                L.token: updated.token,
                L.result: updated.result,
                L.result_data: updated.result_data
                })
            self.session.commit()
        except Exception as e:
            self.session.rollback()
            rospy.logerr("Didn't update: {}".format(e))

        return LiabilityAddressResponse()

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    CacherNode().spin()

